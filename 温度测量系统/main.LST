C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2020 20:22:51 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN main.OBJ
COMPILER INVOKED BY: D:\Software installation path\MDK\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\driver) 
                    -DEBUG OBJECTEXTEND TABS(2)

line level    source

   1          #include <reg52.h>
   2          #include <intrins.h>
   3          #include "LCD1602.h"
   4          #include "DS18B20.h"
   5          
   6          bit flag1s = 0;          //1s定时标志
   7          unsigned char T0RH = 0;  //T0重载值的高字节
   8          unsigned char T0RL = 0;  //T0重载值的低字节
   9          
  10          void ConfigTimer0(unsigned int ms);
  11          unsigned char IntToString(unsigned char *str, int dat);
  12          extern bit Start18B20();
  13          extern bit Get18B20Temp(int *temp);
  14          extern void InitLcd1602();
  15          extern void LcdShowStr(unsigned char x, unsigned char y, unsigned char *str);
  16          void init();
  17          
  18          
  19          void ser()interrupt 4
  20          {
  21   1        RI = 0;
  22   1      }
  23          
  24          void main()
  25          {
  26   1          bit res;
  27   1          int temp ,i ;        //读取到的当前温度值
  28   1          int intT, decT;  //温度值的整数和小数部分
  29   1          unsigned char len;
  30   1          unsigned char str[12];
  31   1      
  32   1          EA = 1;            //开总中断
  33   1          ConfigTimer0(10);  //T0定时10ms
  34   1          Start18B20();      //启动DS18B20
  35   1          InitLcd1602();     //初始化液晶
  36   1        init();
  37   1          while (1)
  38   1          {
  39   2              if (flag1s)  //每秒更新一次温度
  40   2              {
  41   3                  flag1s = 0;
  42   3                  res = Get18B20Temp(&temp);  //读取当前温度
  43   3                  if (res)                    //读取成功时，刷新当前温度显示
  44   3                  {
  45   4                      intT = temp >> 4;             //分离出温度值整数部分
  46   4                      decT = temp & 0xF;            //分离出温度值小数部分
  47   4                      len = IntToString(str, intT); //整数部分转换为字符串
  48   4                      str[len++] = '.';             //添加小数点
  49   4                      decT = (decT*10) / 16;        //二进制的小数部分转换为1位十进制位
  50   4                      str[len++] = decT + '0';      //十进制小数位再转换为ASCII字符
  51   4                      while (len < 6)               //用空格补齐到6个字符长度
  52   4                      {
  53   5                          str[len++] = ' ';
  54   5                      }
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2020 20:22:51 PAGE 2   

  55   4                      str[len] = '\0';              //添加字符串结束符
  56   4                      LcdShowStr(0, 0, str);        //显示到液晶屏上
  57   4              str[len-2]='\r';
  58   4              str[len-1]='\n';
  59   4                      for(i = 0; i < len; i++)
  60   4                      {
  61   5                          SBUF = str[i];
  62   5                          while(!TI);
  63   5                          TI = 0;
  64   5                      }
  65   4      
  66   4                  }
  67   3                  else                        //读取失败时，提示错误信息
  68   3                  {
  69   4                      LcdShowStr(0, 0, "error!");
  70   4                  }
  71   3                  Start18B20();               //重新启动下一次转换
  72   3              }
  73   2          }
  74   1      }
  75          /* 整型数转换为字符串，str-字符串指针，dat-待转换数，返回值-字符串长度 */
  76          unsigned char IntToString(unsigned char *str, int dat)
  77          {
  78   1          signed char i = 0;
  79   1          unsigned char len = 0;
  80   1          unsigned char buf[6];
  81   1      
  82   1          if (dat < 0)  //如果为负数，首先取绝对值，并在指针上添加负号
  83   1          {
  84   2              dat = -dat;
  85   2              *str++ = '-';
  86   2              len++;
  87   2          }
  88   1          do {          //先转换为低位在前的十进制数组
  89   2              buf[i++] = dat % 10;
  90   2              dat /= 10;
  91   2          } while (dat > 0);
  92   1          len += i;     //i最后的值就是有效字符的个数
  93   1          while (i-- > 0)   //将数组值转换为ASCII码反向拷贝到接收指针上
  94   1          {
  95   2              *str++ = buf[i] + '0';
  96   2          }
  97   1          *str = '\0';  //添加字符串结束符
  98   1      
  99   1          return len;   //返回字符串长度
 100   1      }
 101          
 102          /**
 103          *@breif :串口接收函数
 104          *@retrval : None
 105          */
 106          void init()
 107          {
 108   1          SCON  = 0x50;     // SCON: 模式 1, 8-bit UART, 使能接收
 109   1          TMOD |= 0x20;     // TMOD: timer 1, mode 2, 8-bit reload
 110   1          TH1=0xf3;
 111   1          TL1=0xf3;
 112   1          PCON|= 0x80;      //波特率提高一倍 ?
 113   1          TR1 = 1;                  /* TR1:  timer 1 run                          */
 114   1        //  EA    = 1;                  /*打开总中断*/
 115   1          ES    = 1;                  /*打开串口中断*/
 116   1      }
C51 COMPILER V9.60.0.0   MAIN                                                              02/22/2020 20:22:51 PAGE 3   

 117          
 118          /* 配置并启动T0，ms-T0定时时间 */
 119          void ConfigTimer0(unsigned int ms)
 120          {
 121   1          unsigned long tmp;  //临时变量
 122   1      
 123   1          tmp = 11059200 / 12;      //定时器计数频率
 124   1          tmp = (tmp * ms) / 1000;  //计算所需的计数值
 125   1          tmp = 65536 - tmp;        //计算定时器重载值
 126   1          tmp = tmp + 12;           //补偿中断响应延时造成的误差
 127   1          T0RH = (unsigned char)(tmp>>8);  //定时器重载值拆分为高低字节
 128   1          T0RL = (unsigned char)tmp;
 129   1          TMOD &= 0xF0;   //清零T0的控制位
 130   1          TMOD |= 0x01;   //配置T0为模式1
 131   1          TH0 = T0RH;     //加载T0重载值
 132   1          TL0 = T0RL;
 133   1          ET0 = 1;        //使能T0中断
 134   1          TR0 = 1;        //启动T0
 135   1      }
 136          /* T0中断服务函数，完成1秒定时 */
 137          void InterruptTimer0() interrupt 1
 138          {
 139   1          static unsigned char tmr1s = 0;
 140   1      
 141   1          TH0 = T0RH;  //重新加载重载值
 142   1          TL0 = T0RL;
 143   1          tmr1s++;
 144   1          if (tmr1s >= 100)  //定时1s
 145   1          {
 146   2              tmr1s = 0;
 147   2              flag1s = 1;
 148   2          }
 149   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    572    ----
   CONSTANT SIZE    =      7    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      34
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
